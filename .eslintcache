[{"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\reducers\\index.ts":"1","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\Sorting\\index.tsx":"2","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\app\\Router.tsx":"3","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\CartItem\\index.tsx":"4","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\index.tsx":"5","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\app\\history.ts":"6","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\pages\\CartEmpty\\index.jsx":"7","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\pages\\CartOrder\\index.tsx":"8","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\HeaderCart\\index.tsx":"9","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\actions\\app.ts":"10","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\pages\\Main.tsx":"11","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\reducers\\cartReducer.ts":"12","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\actions\\cart.ts":"13","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\app\\store.ts":"14","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\selectors\\index.ts":"15","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\PizzaItem\\index.tsx":"16","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\reducers\\appReducer.ts":"17","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\PizzaOrderPopup\\index.tsx":"18","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\Portal\\index.ts":"19","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\CartTop\\index.tsx":"20","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\Header\\index.tsx":"21","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\hooks\\useLocalStorage.ts":"22","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\Title\\index.tsx":"23"},{"size":309,"mtime":1618039822030,"results":"24","hashOfConfig":"25"},{"size":2603,"mtime":1616953751855,"results":"26","hashOfConfig":"25"},{"size":711,"mtime":1618078247842,"results":"27","hashOfConfig":"25"},{"size":4703,"mtime":1617787776028,"results":"28","hashOfConfig":"25"},{"size":422,"mtime":1618039879706,"results":"29","hashOfConfig":"25"},{"size":138,"mtime":1617276095325,"results":"30","hashOfConfig":"25"},{"size":3059,"mtime":1617276630973,"results":"31","hashOfConfig":"25"},{"size":4861,"mtime":1618087733412,"results":"32","hashOfConfig":"25"},{"size":2071,"mtime":1617275841817,"results":"33","hashOfConfig":"25"},{"size":961,"mtime":1617452134129,"results":"34","hashOfConfig":"25"},{"size":5222,"mtime":1618082024522,"results":"35","hashOfConfig":"25"},{"size":2428,"mtime":1618088151309,"results":"36","hashOfConfig":"25"},{"size":1636,"mtime":1618068871103,"results":"37","hashOfConfig":"25"},{"size":440,"mtime":1618039977618,"results":"38","hashOfConfig":"25"},{"size":1743,"mtime":1617639859543,"results":"39","hashOfConfig":"25"},{"size":1862,"mtime":1617637577772,"results":"40","hashOfConfig":"25"},{"size":1603,"mtime":1617639579975,"results":"41","hashOfConfig":"25"},{"size":4956,"mtime":1618048566344,"results":"42","hashOfConfig":"25"},{"size":484,"mtime":1617601941343,"results":"43","hashOfConfig":"25"},{"size":3350,"mtime":1618039988973,"results":"44","hashOfConfig":"25"},{"size":409,"mtime":1617133955220,"results":"45","hashOfConfig":"25"},{"size":1434,"mtime":1618047935598,"results":"46","hashOfConfig":"25"},{"size":481,"mtime":1616930529319,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nyl31l",{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\reducers\\index.ts",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\Sorting\\index.tsx",["100"],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\app\\Router.tsx",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\CartItem\\index.tsx",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\index.tsx",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\app\\history.ts",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\pages\\CartEmpty\\index.jsx",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\pages\\CartOrder\\index.tsx",["101","102","103"],"import React, { FC, useCallback, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport HeaderCart from \"../../components/HeaderCart\";\r\nimport Logo from \"../../components/Logo\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport {\r\n  loadCartProducts,\r\n  removeFromCart,\r\n  clearCart,\r\n  handleIncrement,\r\n  handleDecrement,\r\n} from \"../../redux/actions/cart\";\r\nimport { PizzaInCartProps } from \"../../types\";\r\nimport {\r\n  getCart,\r\n  getOrderNumber,\r\n  getTotalOrderPrice,\r\n} from \"../../redux/selectors\";\r\nimport CartItem from \"../../components/CartItem\";\r\nimport CartTop from \"../../components/CartTop\";\r\nimport { useLocalStorage } from \"../../hooks/useLocalStorage\";\r\n\r\ninterface Props {\r\n  cart: any[];\r\n  orderNumber: number;\r\n  orderPrice: number;\r\n}\r\n\r\nconst CartOrder: FC<Props> = ({ cart, orderNumber, orderPrice }) => {\r\n  const dispatch = useDispatch();\r\n  const [storageCart, setStorageCart] = useLocalStorage(\"cart\", cart);\r\n\r\n  useEffect(() => {\r\n    if (cart.length === 0) {\r\n      if (window.localStorage.getItem(\"cart\")) {\r\n        dispatch(loadCartProducts(storageCart));\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const onRemove = (i: number) => {\r\n    dispatch(removeFromCart(i));\r\n    setTimeout(() => {\r\n      setStorageCart(cart);\r\n    }, 0);\r\n  };\r\n\r\n  const onClear = () => {\r\n    dispatch(clearCart());\r\n    window.localStorage.removeItem(\"cart\");\r\n  };\r\n\r\n  const onIncrement = (i: number, price: number) => {\r\n    dispatch(handleIncrement(i, price));\r\n    setStorageCart(cart);\r\n  };\r\n\r\n  const onDecrement = (i: number, price: number) => {\r\n    dispatch(handleDecrement(i, price));\r\n    setStorageCart(cart);\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"header\">\r\n        <div className=\"container\">\r\n          <Link to=\"/\">\r\n            <Logo />\r\n          </Link>\r\n          <HeaderCart orderPrice={orderPrice} />\r\n        </div>\r\n      </div>\r\n      <div className=\"content\">\r\n        <div className=\"container container--cart\">\r\n          <div className=\"cart\">\r\n            <CartTop onClear={onClear} />\r\n            <div className=\"content__items\">\r\n              {cart.map(\r\n                (\r\n                  {\r\n                    id,\r\n                    imageUrl,\r\n                    name,\r\n                    type,\r\n                    size,\r\n                    quantity,\r\n                    pizzaPrice,\r\n                    totalPrice,\r\n                    options,\r\n                  },\r\n                  i\r\n                ) => (\r\n                  <CartItem\r\n                    key={id}\r\n                    path={imageUrl}\r\n                    name={name}\r\n                    doughType={type}\r\n                    size={size}\r\n                    quantity={quantity}\r\n                    price={pizzaPrice}\r\n                    total={totalPrice}\r\n                    index={i}\r\n                    options={options}\r\n                    onRemove={onRemove}\r\n                    onIncrement={onIncrement}\r\n                    onDecrement={onDecrement}\r\n                  />\r\n                )\r\n              )}\r\n            </div>\r\n            <div className=\"cart__bottom\">\r\n              <div className=\"cart__bottom-details\">\r\n                <span>\r\n                  {\" \"}\r\n                  Всего пицц: <b>{orderNumber} шт.</b>{\" \"}\r\n                </span>\r\n                <span>\r\n                  {\" \"}\r\n                  Сумма заказа: <b>{orderPrice} ₽</b>{\" \"}\r\n                </span>\r\n              </div>\r\n              <div className=\"cart__bottom-buttons\">\r\n                <Link\r\n                  to=\"/\"\r\n                  className=\"button button--outline button--add go-back-btn\"\r\n                >\r\n                  <svg\r\n                    width=\"8\"\r\n                    height=\"14\"\r\n                    viewBox=\"0 0 8 14\"\r\n                    fill=\"none\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                  >\r\n                    <path\r\n                      d=\"M7 13L1 6.93015L6.86175 1\"\r\n                      stroke=\"#D3D3D3\"\r\n                      strokeWidth=\"1.5\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    />\r\n                  </svg>\r\n\r\n                  <span>Вернуться назад</span>\r\n                </Link>\r\n                <div className=\"button pay-btn\">\r\n                  <span>Оплатить сейчас</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    cart: getCart(state),\r\n    orderNumber: getOrderNumber(state),\r\n    orderPrice: getTotalOrderPrice(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(CartOrder);\r\n","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\HeaderCart\\index.tsx",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\actions\\app.ts",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\pages\\Main.tsx",["104","105","106","107","108"],"import React, { FC, useEffect, useState } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport Categories from \"../components/Categories\";\r\nimport Sorting from \"../components/Sorting\";\r\nimport Title from \"../components/Title\";\r\nimport PizzaItem from \"../components/PizzaItem\";\r\nimport { PizzaProps, PizzaInCartProps } from \"../types\";\r\nimport {\r\n  getCurrentFilter,\r\n  getFilters,\r\n  pizzasToRender,\r\n  getSortingOptions,\r\n  getCurrentSortingOption,\r\n  sortedPizzas,\r\n  getCart,\r\n  getOrderNumber,\r\n  getTotalOrderPrice,\r\n} from \"../redux/selectors\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loadPizzasAsync, setCurrentFilter } from \"../redux/actions/app\";\r\nimport { loadCartProducts } from \"../redux/actions/cart\";\r\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/*\r\n   Install and setup redux                                                 [✓]\r\n   load pizzas and put them in a redux state                               [✓]\r\n   Move filters to redux state                                             [✓]\r\n   Add setActiveFilter and active filter to redux state and actions        [✓]\r\n   add reselect to fetch the requird data from redux store                 [✓]\r\n   write selectors and reselect for filtering/sorting                      [✓]  \r\n   fix filtering options - create an object of filters in store            [✓]\r\n  \r\n   modify the json file to include object with prices based on types       [✓]\r\n\r\n   add Cart state to redux store and add actions to add items to cart      [✓]\r\n\r\n   use classNames library for generating classes dynamically\r\n  \r\n   Load products in cart when a user enters the cart page                  [✓]\r\n\r\n   add remove option                                                       [✓]\r\n\r\n   add clear cart option                                                   [✓]\r\n\r\n   use dynamic rendering and redirect user to empty cart page if there     [✓]\r\n   are no products in the cart\r\n\r\n   add increment/decrement products in cart property in cart               [✓]\r\n*/\r\n\r\ninterface Props {\r\n  pizzas: PizzaProps[];\r\n  filter: string;\r\n  filters: any;\r\n  sortingOptions: {\r\n    [key: string]: string;\r\n  };\r\n  currentSortingOption: string;\r\n  sortedPizzas: PizzaProps;\r\n  cart: any[];\r\n  orderNumber: number;\r\n  orderPrice: number;\r\n}\r\n\r\nconst Main: FC<Props> = ({\r\n  pizzas,\r\n  filter,\r\n  filters,\r\n  sortingOptions,\r\n  currentSortingOption,\r\n  cart,\r\n  orderNumber,\r\n  orderPrice,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [storedCart, setStoredCart] = useLocalStorage(\"cart\", cart);\r\n\r\n  useEffect(() => {\r\n    loadPizzasAsync(dispatch);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!cart.length && window.localStorage.getItem(\"cart\")) {\r\n      console.log(\"taken from useLocalStorageHook\", storedCart);\r\n      dispatch(loadCartProducts(storedCart));\r\n    }\r\n  }, []);\r\n\r\n  const onFilter = (name: string) => dispatch(setCurrentFilter(name));\r\n\r\n  return (\r\n    <>\r\n      <div className=\"wrapper\">\r\n        <Header orderPrice={orderPrice} />\r\n        <div className=\"content\">\r\n          <div className=\"container\">\r\n            <div className=\"content__top\">\r\n              <Categories items={filters} onFilter={onFilter} filter={filter} />\r\n              <Sorting\r\n                sortItems={sortingOptions}\r\n                currentSortingOption={currentSortingOption}\r\n              />\r\n            </div>\r\n            <Title filter={filter} />\r\n            <div className=\"content__items\">\r\n              {pizzas &&\r\n                pizzas.map(\r\n                  (\r\n                    {\r\n                      id,\r\n                      imageUrl,\r\n                      name,\r\n                      types,\r\n                      sizes,\r\n                      price,\r\n                      category,\r\n                      rating,\r\n                      extras,\r\n                    }: PizzaProps,\r\n                    index: number\r\n                  ) => (\r\n                    <PizzaItem\r\n                      key={id}\r\n                      imageUrl={imageUrl}\r\n                      name={name}\r\n                      types={types}\r\n                      sizes={sizes}\r\n                      price={price}\r\n                      category={category}\r\n                      rating={rating}\r\n                      extras={extras}\r\n                      orderNumber={orderNumber}\r\n                      orderPrice={orderPrice}\r\n                    />\r\n                  )\r\n                )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    sortedPizzas: sortedPizzas(state),\r\n    filter: getCurrentFilter(state),\r\n    filters: getFilters(state),\r\n    sortingOptions: getSortingOptions(state),\r\n    currentSortingOption: getCurrentSortingOption(state),\r\n    pizzas:\r\n      getCurrentSortingOption(state) === \"default\"\r\n        ? pizzasToRender(state)\r\n        : sortedPizzas(state),\r\n    cart: getCart(state),\r\n    orderNumber: getOrderNumber(state),\r\n    orderPrice: getTotalOrderPrice(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Main);\r\n","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\reducers\\cartReducer.ts",["109"],"import { PizzaInCartProps } from \"../../types\";\r\nimport {\r\n  LOAD_CART_PRODUCTS,\r\n  ADD_TO_CART,\r\n  REMOVE_FROM_CART,\r\n  CLEAR_CART,\r\n  ADD_EXISTING_ITEM,\r\n  HANDLE_INCREMENT,\r\n  HANDLE_DECREMENT,\r\n} from \"../actions/cart\";\r\n\r\ninterface IInitialStateTypes {\r\n  productsInCart: any[];\r\n}\r\n\r\nconst initialState: IInitialStateTypes = {\r\n  productsInCart: [],\r\n};\r\n\r\nconst cartReducer = (state = initialState, { type, payload }: any) => {\r\n  switch (type) {\r\n    case LOAD_CART_PRODUCTS:\r\n      console.log(\"productts loading\", payload);\r\n      return {\r\n        ...state,\r\n        productsInCart: payload,\r\n      };\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        productsInCart: state.productsInCart.concat({\r\n          id: Math.random(),\r\n          imageUrl: payload.img,\r\n          name: payload.name,\r\n          type: payload.type,\r\n          size: payload.size,\r\n          quantity: 1,\r\n          pizzaPrice: payload.price,\r\n          totalPrice: payload.price,\r\n          options: payload.options,\r\n        }),\r\n      };\r\n    case ADD_EXISTING_ITEM:\r\n      const { index, price } = payload;\r\n      const updated = [...state.productsInCart];\r\n      updated[index].quantity = updated[index].quantity + 1;\r\n      updated[index].totalPrice = updated[index].totalPrice + price;\r\n      return {\r\n        ...state,\r\n        productsInCart: updated,\r\n      };\r\n    case HANDLE_INCREMENT:\r\n      console.log(payload);\r\n      const incremented = [...state.productsInCart];\r\n      incremented[payload.index].quantity += 1;\r\n      incremented[payload.index].totalPrice += payload.price;\r\n      return {\r\n        ...state,\r\n        productsInCart: incremented,\r\n      };\r\n    case HANDLE_DECREMENT:\r\n      console.log(payload);\r\n      const decremented = [...state.productsInCart];\r\n      if (decremented[payload.index].quantity > 1) {\r\n        decremented[payload.index].quantity -= 1;\r\n        decremented[payload.index].totalPrice -= payload.price;\r\n      }\r\n      return {\r\n        ...state,\r\n        productsInCart: decremented,\r\n      };\r\n    case REMOVE_FROM_CART:\r\n      const copy = [...state.productsInCart];\r\n      copy.splice(payload, 1);\r\n      return {\r\n        ...state,\r\n        productsInCart: copy,\r\n      };\r\n    case CLEAR_CART:\r\n      return {\r\n        ...state,\r\n        productsInCart: [],\r\n      };\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n};\r\n\r\nexport { cartReducer };\r\n","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\actions\\cart.ts",["110","111"],"import { PizzaProps, PizzaInCartProps } from \"../../types\";\r\nexport const LOAD_CART_PRODUCTS = \"LOAD_CART_PRODUCTS\";\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const ADD_EXISTING_ITEM = \"ADD_EXISTING_ITEM\";\r\nexport const HANDLE_INCREMENT = \"HANDLE_INCREMENT\";\r\nexport const HANDLE_DECREMENT = \"HANDLE_DECREMENT\";\r\nexport const GET_ORDER_PRICE = \"GET_ORDER_PRICE\";\r\nexport const GET_ORDER_LENGTH = \"GET_ORDER_LENGTH\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\nexport const CLEAR_CART = \"CLEAR_CART\";\r\n\r\nexport const loadCartProducts = (cart: any[]) => ({\r\n  type: LOAD_CART_PRODUCTS,\r\n  payload: cart,\r\n});\r\n\r\nexport const addToCart = (\r\n  type: string,\r\n  size: number,\r\n  price: number,\r\n  img: string,\r\n  name: string,\r\n  options: any[]\r\n) => ({\r\n  type: ADD_TO_CART,\r\n  payload: { type, size, price, img, name, options },\r\n});\r\n\r\nexport const addExistingItem = (index: number, price: number) => ({\r\n  type: ADD_EXISTING_ITEM,\r\n  payload: { index, price },\r\n});\r\n\r\nexport const handleIncrement = (index: number, price: number) => ({\r\n  type: HANDLE_INCREMENT,\r\n  payload: { index, price },\r\n});\r\n\r\nexport const handleDecrement = (index: number, price: number) => ({\r\n  type: HANDLE_DECREMENT,\r\n  payload: { index, price },\r\n});\r\n\r\nexport const getOrderPrice = (totalPrice: number) => ({\r\n  type: GET_ORDER_PRICE,\r\n  payload: totalPrice,\r\n});\r\n\r\nexport const getOrderLength = (len: number) => ({\r\n  type: GET_ORDER_LENGTH,\r\n  payload: len,\r\n});\r\n\r\nexport const removeFromCart = (index: number) => ({\r\n  type: REMOVE_FROM_CART,\r\n  payload: index,\r\n});\r\n\r\nexport const clearCart = () => ({\r\n  type: CLEAR_CART,\r\n});\r\n","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\app\\store.ts",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\selectors\\index.ts",["112"],"import { createSelector } from \"reselect\";\r\nimport { PizzaProps, PizzaInCartProps } from \"../../types\";\r\nimport { AppState } from \"../reducers\";\r\n\r\nexport const getSortingOptions = ({ app }: any) => app.sortingOptions;\r\n\r\nexport const getCurrentSortingOption = ({ app }: any) =>\r\n  app.currentSortingOption;\r\n\r\nexport const getAllPizzas = ({ app }: any) => app.pizzas;\r\n\r\nexport const getCurrentFilter = ({ app }: any) => app.currentFilter;\r\n\r\nexport const getFilters = ({ app }: any) => app.filters;\r\n\r\nexport const getCart = ({ cart }: any) => cart.productsInCart;\r\n\r\nexport const getOrderNumber = ({ cart }: any) => cart.productsInCart.length;\r\n\r\nexport const getTotalOrderPrice = ({ cart }: any) =>\r\n  cart.productsInCart.reduce(\r\n    (acc: number, curr: PizzaInCartProps) =>\r\n      acc + curr.pizzaPrice * curr.quantity,\r\n    0\r\n  );\r\n\r\nexport const pizzasToRender = createSelector(\r\n  [getCurrentFilter, getAllPizzas, getFilters],\r\n  (filter, pizzas, filters) => {\r\n    if (filter === \"all\") {\r\n      return pizzas;\r\n    } else {\r\n      return pizzas.filter(\r\n        (pizza: PizzaProps) =>\r\n          pizza.category.toLowerCase() === filters[filter].toLowerCase()\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport const sortedPizzas = createSelector(\r\n  [getCurrentSortingOption, pizzasToRender],\r\n  (option, pizzas) => {\r\n    if (option === \"default\") {\r\n      return pizzas;\r\n    } else if (option === \"asc\") {\r\n      return [...pizzas].sort(\r\n        (a: PizzaProps, b: PizzaProps) => a.price[0] - b.price[0]\r\n      );\r\n    } else if (option === \"desc\") {\r\n      return [...pizzas].sort((a, b) => b.price[0] - a.price[0]);\r\n    } else if (option === \"alph\") {\r\n      return [...pizzas].sort((a, b) => (a.name > b.name ? 1 : -1));\r\n    }\r\n  }\r\n);\r\n","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\PizzaItem\\index.tsx",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\redux\\reducers\\appReducer.ts",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\PizzaOrderPopup\\index.tsx",["113"],"import React, { FC, useState } from \"react\";\r\nimport { addToCart, addExistingItem } from \"../../redux/actions/cart\";\r\nimport { PizzaInCartProps, PizzaPopupProps } from \"../../types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocalStorage } from \"../../hooks/useLocalStorage\";\r\nimport classNames from \"classnames\";\r\n\r\nconst PizzaOrderPopup: FC<PizzaPopupProps> = ({\r\n  imageUrl,\r\n  name,\r\n  types,\r\n  sizes,\r\n  price,\r\n  extras,\r\n  onPopupClose,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const cart = useSelector(({ cart }: any) => cart.productsInCart);\r\n  const [activeType, setActiveType] = useState(types[0]);\r\n  const [activeSize, setActiveSize] = useState(sizes[1]);\r\n  const [finalPrice, setFinalPrice] = useState(price[1]);\r\n  const [persistCart, setPersistCart] = useLocalStorage<string>(\"cart\", cart);\r\n\r\n  const options = Object.entries(extras).reduce((acc: any, [key, val]) => {\r\n    const obj = { name: key, price: val, selected: false };\r\n    return [...acc, obj];\r\n  }, []);\r\n\r\n  const [extraOptions, setExtraOptions] = useState(options);\r\n  const [priceForOptions, setPriceForOptions] = useState(0);\r\n  const [selectedOptions, setSelectedOptions] = useState<Array<String>>([]);\r\n\r\n  const calcExtrasPrice = (): void => {\r\n    let price = 0;\r\n    let selected = [];\r\n\r\n    for (const elem of extraOptions) {\r\n      if (elem.selected) {\r\n        price += elem.price;\r\n        selected.push(elem.name);\r\n      }\r\n    }\r\n    setPriceForOptions(price);\r\n    setSelectedOptions(selected);\r\n  };\r\n\r\n  const onSelectType = (type: string): void => {\r\n    setActiveType(type);\r\n  };\r\n\r\n  const onSelectSize = (size: number, index: number): void => {\r\n    setActiveSize(size);\r\n    setFinalPrice(price[index]);\r\n  };\r\n\r\n  const onSelectExtras = (i: number): void => {\r\n    const copy = [...extraOptions];\r\n    copy[i].selected = !copy[i].selected;\r\n    setExtraOptions(copy);\r\n    calcExtrasPrice();\r\n  };\r\n\r\n  const onAdd = (): void => {\r\n    const index = cart.findIndex(\r\n      (item: PizzaInCartProps) =>\r\n        item.name === name &&\r\n        item.type === activeType &&\r\n        item.size === activeSize &&\r\n        selectedOptions.length === 0\r\n    );\r\n    if (index >= 0) {\r\n      dispatch(addExistingItem(index, finalPrice));\r\n      onPopupClose();\r\n    } else {\r\n      dispatch(\r\n        addToCart(\r\n          activeType,\r\n          activeSize,\r\n          finalPrice + priceForOptions,\r\n          imageUrl,\r\n          name,\r\n          selectedOptions\r\n        )\r\n      );\r\n      onPopupClose();\r\n    }\r\n    setPersistCart(cart);\r\n  };\r\n\r\n  return (\r\n    <div className=\"popup-content\">\r\n      <div className=\"pizza-image\">\r\n        <img\r\n          className={classNames({\r\n            \"popup-img-small\": activeSize === sizes[0],\r\n            \"popup-img-medium\": activeSize === sizes[1],\r\n            \"popup-img-large\": activeSize === sizes[2],\r\n          })}\r\n          src={imageUrl}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div className=\"popup-right\">\r\n        <span onClick={onPopupClose}>\r\n          <i className=\"fas fa-times close-popup\" />\r\n        </span>\r\n        <h3>{name}</h3>\r\n        <ul className=\"types\">\r\n          {types.map((doughType: string, index: number) => (\r\n            <li\r\n              className={classNames({\r\n                active: doughType === activeType,\r\n                type: doughType,\r\n              })}\r\n              onClick={() => onSelectType(doughType)}\r\n              key={index}\r\n            >\r\n              {doughType}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <ul className=\"types\">\r\n          {sizes.map((size: number, index: number) => (\r\n            <li\r\n              key={index}\r\n              onClick={() => onSelectSize(size, index)}\r\n              className={classNames({\r\n                active: activeSize === size,\r\n                type: size,\r\n              })}\r\n            >\r\n              {size} см.\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <ul className=\"extras\">\r\n          {extraOptions.map((option: any, index: number) => (\r\n            <li key={index} className=\"extra-option\">\r\n              <div className=\"checkbox\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={option.selected}\r\n                  onChange={() => onSelectExtras(index)}\r\n                />\r\n                <span className=\"name\">{option.name}</span>\r\n              </div>\r\n              <div className=\"price\">\r\n                <span className=\"price\">\r\n                  <span>{option.price} </span>\r\n                  <span className=\"ruble-sign\">₽</span>\r\n                </span>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div onClick={onAdd} className=\"button\">\r\n          Добавить в корзину за {finalPrice + priceForOptions} ₽\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PizzaOrderPopup;\r\n","H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\Portal\\index.ts",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\CartTop\\index.tsx",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\Header\\index.tsx",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\hooks\\useLocalStorage.ts",[],"H:\\coding\\pizzaAttempts\\pizza-typescript\\src\\components\\Title\\index.tsx",[],{"ruleId":"114","severity":1,"message":"115","line":16,"column":10,"nodeType":"116","messageId":"117","endLine":16,"endColumn":16},{"ruleId":"114","severity":1,"message":"118","line":1,"column":21,"nodeType":"116","messageId":"117","endLine":1,"endColumn":32},{"ruleId":"114","severity":1,"message":"119","line":13,"column":10,"nodeType":"116","messageId":"117","endLine":13,"endColumn":26},{"ruleId":"120","severity":1,"message":"121","line":39,"column":6,"nodeType":"122","endLine":39,"endColumn":8,"suggestions":"123"},{"ruleId":"114","severity":1,"message":"124","line":1,"column":32,"nodeType":"116","messageId":"117","endLine":1,"endColumn":40},{"ruleId":"114","severity":1,"message":"119","line":7,"column":22,"nodeType":"116","messageId":"117","endLine":7,"endColumn":38},{"ruleId":"114","severity":1,"message":"125","line":77,"column":22,"nodeType":"116","messageId":"117","endLine":77,"endColumn":35},{"ruleId":"120","severity":1,"message":"126","line":81,"column":6,"nodeType":"122","endLine":81,"endColumn":8,"suggestions":"127"},{"ruleId":"120","severity":1,"message":"128","line":88,"column":6,"nodeType":"122","endLine":88,"endColumn":8,"suggestions":"129"},{"ruleId":"114","severity":1,"message":"119","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"130","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":20},{"ruleId":"114","severity":1,"message":"119","line":1,"column":22,"nodeType":"116","messageId":"117","endLine":1,"endColumn":38},{"ruleId":"114","severity":1,"message":"131","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":18},{"ruleId":"114","severity":1,"message":"132","line":22,"column":10,"nodeType":"116","messageId":"117","endLine":22,"endColumn":21},"@typescript-eslint/no-unused-vars","'active' is assigned a value but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'PizzaInCartProps' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cart.length', 'dispatch', and 'storageCart'. Either include them or remove the dependency array.","ArrayExpression",["133"],"'useState' is defined but never used.","'setStoredCart' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["134"],"React Hook useEffect has missing dependencies: 'cart.length', 'dispatch', and 'storedCart'. Either include them or remove the dependency array.",["135"],"'PizzaProps' is defined but never used.","'AppState' is defined but never used.","'persistCart' is assigned a value but never used.",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [cart.length, dispatch, storageCart]",{"range":"142","text":"143"},"Update the dependencies array to be: [dispatch]",{"range":"144","text":"145"},"Update the dependencies array to be: [cart.length, dispatch, storedCart]",{"range":"146","text":"147"},[1144,1146],"[cart.length, dispatch, storageCart]",[2677,2679],"[dispatch]",[2895,2897],"[cart.length, dispatch, storedCart]"]